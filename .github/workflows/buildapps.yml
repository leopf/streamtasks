name: Build Apps

on: workflow_dispatch

jobs:
  build-app:
    name: Build app on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11 
      - name: Install libgirepository1.0 (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install -y libgirepository1.0-dev
      - name: install python dependencies
        working-directory: ./extra/streamtasksui
        run: pip install -r requirements.txt
      - name: make icons
        working-directory: ./extra/streamtasksui
        run: python scripts/prepare.py
      - name: Build App (linux)
        working-directory: ./extra/streamtasksui
        if: matrix.os == 'ubuntu-latest'
        run: python -m briefcase package linux system
      - name: Build App (windows)
        working-directory: ./extra/streamtasksui
        if: matrix.os == 'windows-latest'
        run: python -m briefcase package windows app
      - uses: actions/upload-artifact@v4
        with:
          name: apps-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./extra/streamtasksui/dist/*

  publish-release:
    name: Publish apps
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build-app]
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download Python package artifact
        uses: actions/download-artifact@v4
        with:
          pattern: 'apps-*'
          path: apps
      - name: flatten data
        run: |
          mkdir dist
          find apps -type f -exec mv -i '{}' dist/ ';'
      - name: Extract version from pyproject.toml
        id: extract_version
        run: echo "version=$(grep -oP '(?<=version = ")[^"]+' pyproject.toml | head -1)" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: ${{ steps.extract_version.outputs.version }}
          name: Release ${{ steps.extract_version.outputs.version }}
          body: Release ${{ steps.extract_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  