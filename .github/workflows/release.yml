name: Release

on: workflow_dispatch

jobs:
  build-package:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Build web assets
        run: pnpm install && pnpm -r build:prod

      - name: Build the package
        run: python -m build
        
      - name: Upload Python package artifact
        uses: actions/upload-artifact@v4
        with:
          name: pypackage
          path: dist
    
  build-appimage:
    runs-on: ubuntu-latest
    needs: [build-package]
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install system dependencies
        run: |
          sudo apt update -y
          sudo apt install portaudio19-dev ffmpeg -y

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Download AppImage artifact
        uses: actions/download-artifact@v4
        with:
          name: pypackage
          path: pkg

      - name: Install dependencies
        run: |
          cp $(find pkg/streamtasks*.tar.gz) pkg/streamtasks.tar.gz
          python -m pip install --upgrade pip
          pip install dist/streamtasks.tar.gz[media] cx_Freeze

      - name: Build AppImage
        run: python extra/buildexe.py

      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: appimage
          path: dist

  build-and-publish:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build-package, build-appimage]
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Python package artifact
        uses: actions/download-artifact@v4
        with:
          name: pypackage
          path: dist

      - name: Download AppImage artifact
        uses: actions/download-artifact@v4
        with:
          name: appimage
          path: dist

      - name: Extract version from pyproject.toml
        id: extract_version
        run: echo "version=$(find dist/streamtasks*.tar.gz | sed -E 's/.*streamtasks-([0-9\.]+)\.tar\.gz/\1/')" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: ${{ steps.extract_version.outputs.version }}
          name: Release ${{ steps.extract_version.outputs.version }}
          body: Release ${{ steps.extract_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
